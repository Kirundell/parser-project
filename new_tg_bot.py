import asyncio
import logging
import os
import subprocess
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
import sys
from dotenv import load_dotenv

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
logging.basicConfig(level=logging.INFO)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –≤ —á–∞—Ç
error_logger = logging.getLogger(__name__)
error_logger.setLevel(logging.ERROR)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
class TelegramHandler(logging.Handler):
    def __init__(self, chat_id, bot):
        super().__init__()
        self.chat_id = chat_id
        self.bot = bot

    def emit(self, record):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ —É—Ä–æ–≤–Ω—è ERROR –∏ –≤—ã—à–µ –≤ Telegram
        log_entry = self.format(record)
        asyncio.create_task(self.bot.send_message(self.chat_id, f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n\n{log_entry}"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è PID –ø—Ä–æ—Ü–µ—Å—Å–∞
process = None
# ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
ERROR_CHAT_ID = os.getenv('LOGS_CHAT')

# –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ —É—Ä–æ–≤–Ω—è ERROR –≤ Telegram
telegram_handler = TelegramHandler(ERROR_CHAT_ID, bot)
telegram_handler.setFormatter(logging.Formatter(
    "[%(asctime)s.%(msecs)03d] %(module)10s:%(lineno)-3d %(levelname)-7s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
))
error_logger.addHandler(telegram_handler)


# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ—Ç
start_commands = ['–°—Ç–∞—Ä—Ç ‚úÖ', '–°—Ç–∞—Ä—Ç', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞—Ç—å', 'start']
stop_commands = ['–°—Ç–æ–ø ‚ùå', '–°—Ç–æ–ø', '–°–¢–û–ü', '—Å—Ç–æ–ø', '–∑–∞–∫–æ–Ω—á–∏—Ç—å', 'stop']
info_commands = ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ ‚ÑπÔ∏è', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–∏–Ω—Ñ–æ', 'info']
text_commands = start_commands + stop_commands + info_commands


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def start_keyboard():
    button_run = KeyboardButton(text='–°—Ç–∞—Ä—Ç ‚úÖ')
    button_stop = KeyboardButton(text='–°—Ç–æ–ø ‚ùå')
    button_info = KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ ‚ÑπÔ∏è')
    button_rows = [[button_run, button_stop], [button_info]]
    hello_markup = ReplyKeyboardMarkup(keyboard=button_rows)
    return hello_markup


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def get_chat_id(message: types.Message):
    global process
    chat_id = message.chat.id
    await message.answer(
        text=f'–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –ø–æ–∏—Å–∫–æ–º –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫üöõ',
        reply_markup=start_keyboard(),
        chat=chat_id
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º stderr –≤ –ø–∞–π–ø
    if process is None:
        process = subprocess.Popen(
            [sys.executable, "parser.py"],
            stderr=subprocess.PIPE,
            text=True,
            encoding='utf-8'
        )
        logging.info(f'Started ati_parser.py with PID: {process.pid}')

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–∏—Ç–∞–µ–º stderr –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
        await asyncio.create_task(handle_errors(process))


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /stop
@dp.message(Command("stop"))
async def stop_process(message: types.Message):
    global process
    if process is not None:
        process.terminate()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process = None
        await message.answer("–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        logging.info("Stopped ati_parser.py")
    else:
        await message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info
@dp.message(Command("info"))
async def info(message: types.Message):
    await message.answer(
'''
–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫. 
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–æ–π.
''')


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message(lambda message: message.text in text_commands)
async def handle_text_commands(message: types.Message):
    if message.text in start_commands:
        await get_chat_id(message)
    elif message.text in stop_commands:
        await stop_process(message)
    elif message.text in info_commands:
        await info(message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏–∑ stderr
async def handle_errors(cur_process):
    while True:
        error_line = await asyncio.to_thread(cur_process.stderr.readline)
        if error_line:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ERROR –∏ –≤—ã—à–µ
            logging.info(f'Log from ati_parser.py: {error_line.strip()}')
            if "ERROR" in error_line or "CRITICAL" in error_line:
                error_logger.error(f'{error_line.strip()}')
        else:
            break


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
